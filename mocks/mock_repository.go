// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/zeze1004/image-hub-platform/models"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), user)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), email)
}

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// CreateImage mocks base method.
func (m *MockImageRepository) CreateImageMetaData(image *models.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageMetaData", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockImageRepositoryMockRecorder) CreateImage(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageMetaData", reflect.TypeOf((*MockImageRepository)(nil).CreateImageMetaData), image)
}

// DeleteImage mocks base method.
func (m *MockImageRepository) DeleteImage(imageID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", imageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockImageRepositoryMockRecorder) DeleteImage(imageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockImageRepository)(nil).DeleteImage), imageID)
}

// DeleteImagesByUserID mocks base method.
func (m *MockImageRepository) DeleteImagesByUserID(userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImagesByUserID", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImagesByUserID indicates an expected call of DeleteImagesByUserID.
func (mr *MockImageRepositoryMockRecorder) DeleteImagesByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImagesByUserID", reflect.TypeOf((*MockImageRepository)(nil).DeleteImagesByUserID), userID)
}

// GetAllImages mocks base method.
func (m *MockImageRepository) GetAllImages() ([]models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllImages")
	ret0, _ := ret[0].([]models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllImages indicates an expected call of GetAllImages.
func (mr *MockImageRepositoryMockRecorder) GetAllImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllImages", reflect.TypeOf((*MockImageRepository)(nil).GetAllImages))
}

// GetImageByID mocks base method.
func (m *MockImageRepository) GetImageByID(id uint) (*models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageByID", id)
	ret0, _ := ret[0].(*models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByID indicates an expected call of GetImageByID.
func (mr *MockImageRepositoryMockRecorder) GetImageByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByID", reflect.TypeOf((*MockImageRepository)(nil).GetImageByID), id)
}

// GetImagesByUserID mocks base method.
func (m *MockImageRepository) GetImagesByUserID(userID uint) ([]models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesByUserID", userID)
	ret0, _ := ret[0].([]models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesByUserID indicates an expected call of GetImagesByUserID.
func (mr *MockImageRepositoryMockRecorder) GetImagesByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesByUserID", reflect.TypeOf((*MockImageRepository)(nil).GetImagesByUserID), userID)
}

// MockCategoryRepository is a mock of CategoryRepository interface.
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository.
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance.
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// GetCategoriesByImageID mocks base method.
func (m *MockCategoryRepository) GetCategoriesByImageID(imageID uint) ([]models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoriesByImageID", imageID)
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoriesByImageID indicates an expected call of GetCategoriesByImageID.
func (mr *MockCategoryRepositoryMockRecorder) GetCategoriesByImageID(imageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoriesByImageID", reflect.TypeOf((*MockCategoryRepository)(nil).GetCategoriesByImageID), imageID)
}

// GetCategoriesByName mocks base method.
func (m *MockCategoryRepository) GetCategoriesByName(names []string) ([]models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoriesByName", names)
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoriesByName indicates an expected call of GetCategoriesByName.
func (mr *MockCategoryRepositoryMockRecorder) GetCategoriesByName(names interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoriesByName", reflect.TypeOf((*MockCategoryRepository)(nil).GetCategoriesByName), names)
}

// GetImagesByCategoryID mocks base method.
func (m *MockCategoryRepository) GetImagesByCategoryID(categoryID uint) ([]models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesByCategoryID", categoryID)
	ret0, _ := ret[0].([]models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesByCategoryID indicates an expected call of GetImagesByCategoryID.
func (mr *MockCategoryRepositoryMockRecorder) GetImagesByCategoryID(categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesByCategoryID", reflect.TypeOf((*MockCategoryRepository)(nil).GetImagesByCategoryID), categoryID)
}

// GetImagesByCategoryIDAndUserID mocks base method.
func (m *MockCategoryRepository) GetImagesByCategoryIDAndUserID(categoryID, userID uint) ([]models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesByCategoryIDAndUserID", categoryID, userID)
	ret0, _ := ret[0].([]models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesByCategoryIDAndUserID indicates an expected call of GetImagesByCategoryIDAndUserID.
func (mr *MockCategoryRepositoryMockRecorder) GetImagesByCategoryIDAndUserID(categoryID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesByCategoryIDAndUserID", reflect.TypeOf((*MockCategoryRepository)(nil).GetImagesByCategoryIDAndUserID), categoryID, userID)
}

// MockImageCategoryRepository is a mock of ImageCategoryRepository interface.
type MockImageCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageCategoryRepositoryMockRecorder
}

// MockImageCategoryRepositoryMockRecorder is the mock recorder for MockImageCategoryRepository.
type MockImageCategoryRepositoryMockRecorder struct {
	mock *MockImageCategoryRepository
}

// NewMockImageCategoryRepository creates a new mock instance.
func NewMockImageCategoryRepository(ctrl *gomock.Controller) *MockImageCategoryRepository {
	mock := &MockImageCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockImageCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageCategoryRepository) EXPECT() *MockImageCategoryRepositoryMockRecorder {
	return m.recorder
}

// AddCategoryToImage mocks base method.
func (m *MockImageCategoryRepository) AddCategoryToImage(imageID, categoryID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategoryToImage", imageID, categoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategoryToImage indicates an expected call of AddCategoryToImage.
func (mr *MockImageCategoryRepositoryMockRecorder) AddCategoryToImage(imageID, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategoryToImage", reflect.TypeOf((*MockImageCategoryRepository)(nil).AddCategoryToImage), imageID, categoryID)
}

// AddImageCategory mocks base method.
func (m *MockImageCategoryRepository) AddImageCategory(imageID, categoryID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImageCategory", imageID, categoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddImageCategory indicates an expected call of AddImageCategory.
func (mr *MockImageCategoryRepositoryMockRecorder) AddImageCategory(imageID, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImageCategory", reflect.TypeOf((*MockImageCategoryRepository)(nil).AddImageCategory), imageID, categoryID)
}

// GetCategoriesByImageID mocks base method.
func (m *MockImageCategoryRepository) GetCategoriesByImageID(imageID uint) ([]models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoriesByImageID", imageID)
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoriesByImageID indicates an expected call of GetCategoriesByImageID.
func (mr *MockImageCategoryRepositoryMockRecorder) GetCategoriesByImageID(imageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoriesByImageID", reflect.TypeOf((*MockImageCategoryRepository)(nil).GetCategoriesByImageID), imageID)
}

// RemoveCategoryFromImage mocks base method.
func (m *MockImageCategoryRepository) RemoveCategoryFromImage(imageID, categoryID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCategoryFromImage", imageID, categoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCategoryFromImage indicates an expected call of RemoveCategoryFromImage.
func (mr *MockImageCategoryRepositoryMockRecorder) RemoveCategoryFromImage(imageID, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCategoryFromImage", reflect.TypeOf((*MockImageCategoryRepository)(nil).RemoveCategoryFromImage), imageID, categoryID)
}
